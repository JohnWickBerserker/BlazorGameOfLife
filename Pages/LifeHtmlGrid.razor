@implements IDisposable
@implements IHandleEvent
@page "/lifehtmlgrid"

<PageTitle>Game of Life, Html Grid</PageTitle>

<div class="instructions">
<ul>
    <li>left mouse button - set alive</li>
    <li>right mouse button - set dead</li>
</ul>
</div>

<div class="lifegrid" @oncontextmenu:preventDefault="true" @oncontextmenu="@(e => {})">
    @for (var i = 0; i < game.Cells.Length; i++)
    {
        @for (var j = 0; j < game.Cells[i].Length; j++)
        {
            var r = i;
            var c = j;
            <div class="@CssClass(i,j)"
                @onmousemove="@(e => CellMouseEvent(e, r, c))"
                @onmousedown="@(e => CellMouseEvent(e, r, c))">
            </div>
        }
    }
</div>

<div class="play-stop-button">
<div></div>
<button class="btn btn-success" @onclick="game.PlayStopAsync">@game.PlayStopButtonText</button>
<input type="range" min="1" max="500" @bind="game.StepMs" title="delay in milliseconds, from 1 to 500"/>
</div>

@code {
    GameTemplate game;

    public LifeHtmlGrid()
    {
        game = new GameTemplate(50, 50);
        game.LoopEvent += () => StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
    }

    string CssClass(bool alive)
    {
        if (alive)
        {
            return "alive";
        }
        else
        {
            return "";
        }
    }

    string CssClass(int i, int j)
    {
        return CssClass(game.Cells[i][j]);
    }

    void CellMouseEvent(MouseEventArgs e, int i, int j)
    {
        if ((e.Buttons & 1) == 1) // left button
        {
            game.MakeCellAlive(i, j);
            StateHasChanged();
        }
        if ((e.Buttons & 2) == 2) // right button
        {
            game.MakeCellDead(i, j);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await game.RunAsync();
    }

    public void Dispose()
    {
        game.Stop();
    }

    Task IHandleEvent.HandleEventAsync(
        EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);

}
