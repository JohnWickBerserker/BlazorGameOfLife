@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@implements IDisposable
@page "/usingcanvas"

<PageTitle>Game of Life, Canvas</PageTitle>

<div class="lifecanvas">
    <div @onmousedown="MouseEvent" @onmousemove="MouseEvent">
        <BECanvas Width="500" Height="500" @ref="_canvasReference"></BECanvas>
    </div>
</div>

<div class="play-stop-button">
<div></div>
<button class="btn btn-success" @onclick="game.PlayStopAsync">@game.PlayStopButtonText</button>
<input type="range" min="1" max="500" @bind="game.StepMs" title="delay in milliseconds, from 1 to 500"/>
</div>

@code {

    BECanvasComponent _canvasReference;
    Canvas2DContext _context;

    GameTemplate game;

    public UsingCanvas()
    {
        game = new GameTemplate(50, 50);
        game.LoopEvent += () => RenderGameAsync();
    }

    void MouseEvent(MouseEventArgs e)
    {
        var i = (int)e.OffsetX / 10;
        var j = (int)e.OffsetY / 10;
        if ((e.Buttons & 1) == 1) // left button
        {
            game.MakeCellAlive(i, j);
        }
        if ((e.Buttons & 2) == 2) // right button
        {
            game.MakeCellDead(i, j);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();
        RenderGameAsync();
    }

    async void RenderGameAsync()
    {
        if (_context == null)
        {
            return;
        }

        await _context.ClearRectAsync(0, 0, 500, 500);

        await _context.SetFillStyleAsync("green");

        for (var i = 0; i < game.Rows; i++)
        {
            for (var j = 0; j < game.Columns; j++)
            {
                if (game.Cells[i][j])
                {
                    await _context.FillRectAsync(i * 10 + 1, j * 10 + 1, 8, 8);
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await game.RunAsync();
    }

    public void Dispose()
    {
        game.Stop();
    }

}
